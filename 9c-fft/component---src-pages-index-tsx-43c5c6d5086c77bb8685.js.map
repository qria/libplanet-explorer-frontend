{"version":3,"sources":["webpack:///./src/pages/index.tsx","webpack:///./src/misc/useSearchParams.ts","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx"],"names":["BlockList","_ref3","blocks","columns","key","name","fieldName","iconName","isIconOnly","minWidth","maxWidth","isRowHeader","isResizable","isSorted","isSortedDescending","data","isPadded","onRender","block","react_default","a","createElement","Link","href","hash","index","beforeBlock","Math","min","length","beforeTimestamp","Date","parse","timestamp","nowTimestamp","Fragment","transactions","DetailsList","items","slice","selectionMode","SelectionMode","none","getKey","setKey","layoutMode","DetailsListLayoutMode","justified","isHeaderVisible","onItemInvoked","navigate","IndexPage","_ref","location","_useSearchParams","_useQueryString","useQueryString","queryString","setQueryString","querystring","searchParams","stringify","useSearchParams","setSearchParams","_searchParams$offset","offset","setOffset","newSearchParams","Object","assign","olderHandler","newerHandler","_useState","useState","excludeEmptyTxs","setExcludeEmptyTxs","Checkbox","label","checked","onChange","_","graphql","variables","limit","pollInterval","_ref2","loading","error","timestamps","map","interval","i","difficulties","difficulty","reduce","d","sum","DefaultButton","onClick","disabled","className","css","_templateObject","pages_BlockList","useMemo","search","substr","useCallback","path","pathname","withPrefix","BlockCommonFragmentDoc","gql","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","TransactionByIdDocument","_templateObject5","TransactionByIdComponent"],"mappings":"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","file":"component---src-pages-index-tsx-43c5c6d5086c77bb8685.js","sourcesContent":["import React, { useState } from 'react';\nimport { css } from 'emotion';\nimport { navigate } from 'gatsby';\nimport { Checkbox, DefaultButton, Link } from 'office-ui-fabric-react';\nimport {\n  DetailsList,\n  DetailsListLayoutMode,\n  SelectionMode,\n  IColumn,\n} from 'office-ui-fabric-react/lib/DetailsList';\nimport { Block, BlockListComponent } from '../generated/graphql';\nimport useSearchParams from '../misc/useSearchParams';\n\ninterface IndexPageProps {\n  location: Location;\n}\n\nconst POLL_INTERVAL = 2000;\n\nconst IndexPage: React.FC<IndexPageProps> = ({ location }) => {\n  const limit = 21;\n  const [searchParams, setSearchParams] = useSearchParams(location);\n  const { offset = 0 } = searchParams;\n  const setOffset = (offset: number) => {\n    if (offset < 1) {\n      const newSearchParams = { ...searchParams };\n      delete newSearchParams.offset;\n      setSearchParams(newSearchParams);\n    } else {\n      setSearchParams({ ...searchParams, offset });\n    }\n  };\n  const olderHandler = () => {\n    setOffset(+offset + limit);\n  };\n  const newerHandler = () => {\n    setOffset(+offset - limit);\n  };\n  const [excludeEmptyTxs, setExcludeEmptyTxs] = useState(false);\n  return (\n    <>\n      <Checkbox\n        label=\"Include blocks having any tx\"\n        checked={excludeEmptyTxs}\n        onChange={(_, checked) => {\n          setExcludeEmptyTxs(!!checked);\n        }}\n      />\n      <BlockListComponent\n        variables={{ offset, limit, excludeEmptyTxs }}\n        pollInterval={POLL_INTERVAL}\n      >\n        {({ data, loading, error }) => {\n          if (error) return <p>error!</p>;\n\n          const timestamps: Date[] | null =\n            data && data.blocks\n              ? data.blocks.map(block => new Date(block!.timestamp))\n              : null;\n\n          let interval: number | null = timestamps ? 0 : null;\n          if (interval != null && timestamps) {\n            for (let i = 0; i < timestamps.length - 1; i++) {\n              interval += +timestamps[i] - +timestamps[i + 1];\n            }\n            interval /= (timestamps.length - 1) * 1000;\n          }\n\n          const difficulties: number[] | null =\n            data && data.blocks\n              ? data.blocks.map(block => block!.difficulty)\n              : null;\n          let difficulty = 0;\n          if (difficulty != null && difficulties) {\n            difficulty =\n              difficulties.reduce((d, sum) => d + sum, 0) / difficulties.length;\n          }\n          return (\n            <>\n              <p key=\"interval\">\n                Average interval in this page: {interval} sec\n              </p>\n              <p key=\"difficulty\">\n                Average difficulty in this page: {difficulty}\n              </p>\n              <DefaultButton\n                onClick={newerHandler}\n                disabled={loading || offset < 1}\n                className={css`\n                  margin-right: 5px;\n                `}>\n                &larr; Newer\n              </DefaultButton>\n              <DefaultButton disabled={loading} onClick={olderHandler}>\n                Older &rarr;\n              </DefaultButton>\n              {loading ? (\n                <p>Loading&hellip;</p>\n              ) : (\n                <BlockList\n                  blocks={loading ? [] : (data!.blocks as NonNullable<Block[]>)}\n                />\n              )}\n            </>\n          );\n        }}\n      </BlockListComponent>\n    </>\n  );\n};\n\ninterface BlockListProps {\n  blocks: Pick<Block, 'hash' | 'index' | 'timestamp'>[];\n}\n\nconst BlockList: React.FC<BlockListProps> = ({ blocks }) => {\n  const columns: IColumn[] = [\n    {\n      key: 'columnIndex',\n      name: 'Index',\n      fieldName: 'index',\n      iconName: 'NumberSymbol',\n      isIconOnly: true,\n      minWidth: 5,\n      maxWidth: 40,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'number',\n      isPadded: true,\n    },\n    {\n      key: 'columnHash',\n      name: 'Hash',\n      fieldName: 'hash',\n      minWidth: 200,\n      maxWidth: 450,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: false,\n      data: 'string',\n      isPadded: true,\n      onRender: block => (\n        <Link href={`./block/?${block.hash}`}>{block.hash}</Link>\n      ),\n    },\n    {\n      key: 'columnTimestamp',\n      name: 'Timestamp',\n      fieldName: 'timestamp',\n      minWidth: 100,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n    },\n    {\n      key: 'coulmnMiner',\n      name: 'Miner',\n      fieldName: 'miner',\n      minWidth: 200,\n      maxWidth: 450,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n    },\n    {\n      key: 'columnTimeTaken',\n      name: 'Time Taken',\n      minWidth: 80,\n      maxWidth: 200,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: true,\n      data: 'string',\n      isPadded: true,\n      onRender: (block, index) => {\n        let beforeBlock = blocks[Math.min(index! + 1, blocks.length - 1)];\n        let beforeTimestamp = Date.parse(beforeBlock.timestamp);\n        let nowTimestamp = Date.parse(block.timestamp);\n        return <>{(nowTimestamp - beforeTimestamp) / 1000}</>;\n      },\n    },\n    {\n      key: 'columnTxNumber',\n      name: 'Tx #',\n      minWidth: 5,\n      maxWidth: 20,\n      isRowHeader: true,\n      isResizable: true,\n      isSorted: false,\n      isSortedDescending: false,\n      data: 'number',\n      isPadded: true,\n      onRender: block => <>{block.transactions.length}</>,\n    },\n  ];\n  return (\n    <DetailsList\n      items={blocks.slice(0, -1)}\n      columns={columns}\n      selectionMode={SelectionMode.none}\n      getKey={block => block.hash}\n      setKey=\"set\"\n      layoutMode={DetailsListLayoutMode.justified}\n      isHeaderVisible={true}\n      onItemInvoked={block => navigate(`/block/?${block.hash}`)}\n    />\n  );\n};\n\nexport default IndexPage;\n","import querystring from 'querystring';\nimport useQueryString from './useQueryString';\n\nexport default function useSearchParams(location: Location) {\n  const [queryString, setQueryString] = useQueryString(location);\n  const searchParams = querystring.parse(queryString);\n  const setSearchParams = (searchParams: any) =>\n    setQueryString(querystring.stringify(searchParams));\n  return [searchParams, setSearchParams] as const;\n}\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback((queryString: string) => {\n    const path = location.pathname.substr(withPrefix('/').length - 1);\n    navigate(path + (queryString ? `?${queryString}` : ''));\n  }, [location, navigate]);\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string,\n  String: string,\n  Boolean: boolean,\n  Int: number,\n  Float: number,\n  Address: any,\n  ByteString: any,\n  DateTimeOffset: any,\n  Date: any,\n  DateTime: any,\n  Decimal: any,\n  Milliseconds: any,\n  Seconds: any,\n};\n\nexport type Action = {\n  __typename?: 'Action',\n  arguments: Array<ActionArgumentType>,\n};\n\nexport type ActionArgumentType = {\n  __typename?: 'ActionArgumentType',\n  key: Scalars['String'],\n  value: Scalars['String'],\n};\n\n\nexport type Block = {\n  __typename?: 'Block',\n  difficulty: Scalars['Int'],\n  hash: Scalars['ID'],\n  index: Scalars['Int'],\n  miner: Scalars['Address'],\n  nonce: Scalars['ByteString'],\n  previousBlock?: Maybe<Block>,\n  timestamp: Scalars['DateTimeOffset'],\n  transactions: Array<Transaction>,\n};\n\nexport type BlockQuery = {\n  __typename?: 'BlockQuery',\n  block?: Maybe<Block>,\n  blocks: Array<Block>,\n  transaction?: Maybe<Transaction>,\n};\n\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>,\n  offset?: Maybe<Scalars['Int']>,\n  limit?: Maybe<Scalars['Int']>,\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>\n};\n\n\nexport type BlockQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\n\n\n\n\n\n\nexport type Transaction = {\n  __typename?: 'Transaction',\n  actions: Array<Action>,\n  id: Scalars['ID'],\n  nonce: Scalars['Int'],\n  publicKey: Scalars['ByteString'],\n  signature: Scalars['ByteString'],\n  signer: Scalars['Address'],\n  timestamp: Scalars['DateTimeOffset'],\n  updatedAddresses: Array<Scalars['Address']>,\n};\nexport type BlockCommonFragment = ({ __typename?: 'Block' } & Pick<Block, 'hash' | 'index' | 'difficulty' | 'timestamp'>);\n\nexport type TransactionCommonFragment = ({ __typename?: 'Transaction' } & Pick<Transaction, 'id' | 'nonce' | 'publicKey' | 'signature' | 'signer' | 'timestamp' | 'updatedAddresses'>);\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'],\n  limit: Scalars['Int'],\n  excludeEmptyTxs: Scalars['Boolean']\n};\n\n\nexport type BlockListQuery = ({ __typename?: 'BlockQuery' } & { blocks: Array<({ __typename?: 'Block' } & Pick<Block, 'miner'> & { transactions: Array<({ __typename?: 'Transaction' } & Pick<Transaction, 'id'>)> } & BlockCommonFragment)> });\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>\n};\n\n\nexport type BlockByHashQuery = ({ __typename?: 'BlockQuery' } & { block: Maybe<({ __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & { previousBlock: Maybe<({ __typename?: 'Block' } & Pick<Block, 'hash'>)>, transactions: Array<({ __typename?: 'Transaction' } & TransactionCommonFragment)> } & BlockCommonFragment)> });\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>\n};\n\n\nexport type TransactionByIdQuery = ({ __typename?: 'BlockQuery' } & { transaction: Maybe<({ __typename?: 'Transaction' } & TransactionCommonFragment)> });\nexport const BlockCommonFragmentDoc = gql`\n    fragment BlockCommon on Block {\n  hash\n  index\n  difficulty\n  timestamp\n}\n    `;\nexport const TransactionCommonFragmentDoc = gql`\n    fragment TransactionCommon on Transaction {\n  id\n  nonce\n  publicKey\n  signature\n  signer\n  timestamp\n  updatedAddresses\n}\n    `;\nexport const BlockListDocument = gql`\n    query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!) {\n  blocks(desc: true, offset: $offset, limit: $limit, excludeEmptyTxs: $excludeEmptyTxs) {\n    ...BlockCommon\n    miner\n    transactions {\n      id\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}`;\nexport type BlockListComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockListQuery, BlockListQueryVariables>, 'query'> & ({ variables: BlockListQueryVariables; skip?: boolean; } | { skip: boolean; });\n\n    export const BlockListComponent = (props: BlockListComponentProps) => (\n      <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables> query={BlockListDocument} {...props} />\n    );\n    \nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockListQuery, BlockListQueryVariables> & TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockListQuery,\n  BlockListQueryVariables,\n  BlockListProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockListQuery, BlockListQueryVariables, BlockListProps<TChildProps>>(BlockListDocument, {\n      alias: 'withBlockList',\n      ...operationOptions\n    });\n};\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<BlockListQuery, BlockListQueryVariables>;\nexport const BlockByHashDocument = gql`\n    query BlockByHash($hash: ID) {\n  block(hash: $hash) {\n    ...BlockCommon\n    miner\n    nonce\n    previousBlock {\n      hash\n    }\n    transactions {\n      ...TransactionCommon\n    }\n  }\n}\n    ${BlockCommonFragmentDoc}\n${TransactionCommonFragmentDoc}`;\nexport type BlockByHashComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<BlockByHashQuery, BlockByHashQueryVariables>, 'query'>;\n\n    export const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n      <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables> query={BlockByHashDocument} {...props} />\n    );\n    \nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<BlockByHashQuery, BlockByHashQueryVariables> & TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  BlockByHashQuery,\n  BlockByHashQueryVariables,\n  BlockByHashProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, BlockByHashQuery, BlockByHashQueryVariables, BlockByHashProps<TChildProps>>(BlockByHashDocument, {\n      alias: 'withBlockByHash',\n      ...operationOptions\n    });\n};\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<BlockByHashQuery, BlockByHashQueryVariables>;\nexport const TransactionByIdDocument = gql`\n    query TransactionById($id: ID) {\n  transaction(id: $id) {\n    ...TransactionCommon\n  }\n}\n    ${TransactionCommonFragmentDoc}`;\nexport type TransactionByIdComponentProps = Omit<ApolloReactComponents.QueryComponentOptions<TransactionByIdQuery, TransactionByIdQueryVariables>, 'query'>;\n\n    export const TransactionByIdComponent = (props: TransactionByIdComponentProps) => (\n      <ApolloReactComponents.Query<TransactionByIdQuery, TransactionByIdQueryVariables> query={TransactionByIdDocument} {...props} />\n    );\n    \nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<TransactionByIdQuery, TransactionByIdQueryVariables> & TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(operationOptions?: ApolloReactHoc.OperationOption<\n  TProps,\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables,\n  TransactionByIdProps<TChildProps>>) {\n    return ApolloReactHoc.withQuery<TProps, TransactionByIdQuery, TransactionByIdQueryVariables, TransactionByIdProps<TChildProps>>(TransactionByIdDocument, {\n      alias: 'withTransactionById',\n      ...operationOptions\n    });\n};\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<TransactionByIdQuery, TransactionByIdQueryVariables>;"],"sourceRoot":""}