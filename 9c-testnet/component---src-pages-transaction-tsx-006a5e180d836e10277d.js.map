{"version":3,"sources":["webpack:///./src/pages/transaction.tsx","webpack:///./src/misc/useQueryString.ts","webpack:///./src/generated/graphql.tsx"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","_misc_useQueryString__WEBPACK_IMPORTED_MODULE_1__","_generated_graphql__WEBPACK_IMPORTED_MODULE_2__","TransactionPage","_ref","location","_useQueryString","useQueryString","queryString","id","a","createElement","variables","_ref2","data","loading","error","transaction","nonce","publicKey","signature","signer","timestamp","updatedAddresses","map","address","useMemo","search","substr","useCallback","path","pathname","withPrefix","length","navigate","BlockCommonFragmentDoc","gql","_templateObject","TransactionCommonFragmentDoc","_templateObject2","BlockListDocument","_templateObject3","BlockListComponent","props","react__WEBPACK_IMPORTED_MODULE_2__","_apollo_react_components__WEBPACK_IMPORTED_MODULE_3__","Object","assign","query","BlockByHashDocument","_templateObject4","BlockByHashComponent","TransactionByIdDocument","_templateObject5","TransactionByIdComponent"],"mappings":"0FAAAA,EAAAC,EAAAC,GAAA,IAAAC,EAAAH,EAAA,GAAAI,EAAAJ,EAAAK,EAAAF,GAAAG,EAAAN,EAAA,KAAAO,EAAAP,EAAA,KA0DeQ,UAlDyC,SAAAC,GAAkB,IAAfC,EAAeD,EAAfC,SAAeC,EAClCC,YAAeF,GAA9CG,EADiEF,EAAA,GAElEG,GAFkEH,EAAA,GAE7DE,GACX,OACET,EAAAW,EAAAC,cAACT,EAAA,EAAD,CAA0BU,UAAW,CAAEH,OACpC,SAAAI,GAA8B,IAA3BC,EAA2BD,EAA3BC,KAAMC,EAAqBF,EAArBE,QAASC,EAAYH,EAAZG,MACjB,GAAID,EAAS,OAAOhB,EAAAW,EAAAC,cAAA,qBACpB,GAAIK,EAAO,OAAOjB,EAAAW,EAAAC,cAAA,mBAFW,IAGrBM,EAAgBH,EAAhBG,YACR,OAAKA,EAOHlB,EAAAW,EAAAC,cAAA,UACEZ,EAAAW,EAAAC,cAAA,gBACAZ,EAAAW,EAAAC,cAAA,UACEZ,EAAAW,EAAAC,cAAA,YAAOM,EAAYR,KAErBV,EAAAW,EAAAC,cAAA,mBACAZ,EAAAW,EAAAC,cAAA,UAAKM,EAAYC,MAAjB,KACAnB,EAAAW,EAAAC,cAAA,wBACAZ,EAAAW,EAAAC,cAAA,UACEZ,EAAAW,EAAAC,cAAA,YAAOM,EAAYE,YAErBpB,EAAAW,EAAAC,cAAA,uBACAZ,EAAAW,EAAAC,cAAA,UACEZ,EAAAW,EAAAC,cAAA,YAAOM,EAAYG,YAErBrB,EAAAW,EAAAC,cAAA,oBACAZ,EAAAW,EAAAC,cAAA,UACEZ,EAAAW,EAAAC,cAAA,YAAOM,EAAYI,SAErBtB,EAAAW,EAAAC,cAAA,uBACAZ,EAAAW,EAAAC,cAAA,UAAKM,EAAYK,WACjBvB,EAAAW,EAAAC,cAAA,+BAEEM,EAAYM,iBAAiBC,IAC3B,SAAAC,GAAO,OAAI1B,EAAAW,EAAAC,cAAA,UAAIZ,EAAAW,EAAAC,cAAA,YAAOc,OA7B1B1B,EAAAW,EAAAC,cAAA,iCACuBZ,EAAAW,EAAAC,cAAA,YAAOF,oGCjB3B,SAASF,EAAeF,GAMrC,MAAO,CALaqB,kBAAQ,kBAAMrB,EAASsB,OAAOC,OAAO,IAAI,CAACvB,IACvCwB,sBAAY,SAACrB,GAClC,IAAMsB,EAAOzB,EAAS0B,SAASH,OAAOI,qBAAW,KAAKC,OAAS,GAC/DC,mBAASJ,GAAQtB,EAAW,IAAOA,EAAgB,MAClD,CAACH,EAAU6B,s6CCgIT,IAAMC,EAAyBC,IAAHC,KAQtBC,EAA+BF,IAAHG,KAW5BC,EAAoBJ,IAAHK,IAe1BN,GAWSO,EAAqB,SAACC,GAAD,OAChCC,EAAA,cAACC,EAAA,EAADC,OAAAC,OAAA,CACEC,MAAOR,GACHG,KA+BD,IAAMM,EAAsBb,IAAHc,IAc5Bf,EACAG,GAUSa,EAAuB,SAACR,GAAD,OAClCC,EAAA,cAACC,EAAA,EAADC,OAAAC,OAAA,CACEC,MAAOC,GACHN,KA+BD,IAAMS,EAA0BhB,IAAHiB,IAMhCf,GAUSgB,EAA2B,SACtCX,GADsC,OAGtCC,EAAA,cAACC,EAAA,EAADC,OAAAC,OAAA,CAIEC,MAAOI,GACHT","file":"component---src-pages-transaction-tsx-006a5e180d836e10277d.js","sourcesContent":["import React from 'react';\nimport useQueryString from '../misc/useQueryString';\nimport { TransactionByIdComponent } from '../generated/graphql';\n\ninterface TransactionPageProps {\n  location: Location;\n}\n\nconst TransactionPage: React.FC<TransactionPageProps> = ({ location }) => {\n  const [queryString, setQueryString] = useQueryString(location);\n  const id = queryString;\n  return (\n    <TransactionByIdComponent variables={{ id }}>\n      {({ data, loading, error }) => {\n        if (loading) return <p>loading&hellip;</p>;\n        if (error) return <p>error!</p>;\n        const { transaction } = data!;\n        if (!transaction)\n          return (\n            <p>\n              No such transaction: <code>{id}</code>\n            </p>\n          );\n        return (\n          <dl>\n            <dt>Id</dt>\n            <dd>\n              <code>{transaction.id}</code>\n            </dd>\n            <dt>Nonce</dt>\n            <dd>{transaction.nonce} </dd>\n            <dt>Public Key</dt>\n            <dd>\n              <code>{transaction.publicKey}</code>\n            </dd>\n            <dt>Signature</dt>\n            <dd>\n              <code>{transaction.signature}</code>\n            </dd>\n            <dt>Signer</dt>\n            <dd>\n              <code>{transaction.signer}</code>\n            </dd>\n            <dt>Timestamp</dt>\n            <dd>{transaction.timestamp}</dd>\n            <dt>Updated Addresses</dt>\n            {\n              transaction.updatedAddresses.map(\n                address => <dd><code>{address}</code></dd>\n              )\n            }\n          </dl>\n        );\n      }}\n    </TransactionByIdComponent>\n  );\n};\n\nexport default TransactionPage;\n","import { useCallback, useMemo } from 'react';\nimport { navigate, withPrefix } from 'gatsby';\n\nexport default function useQueryString(location: Location) {\n  const queryString = useMemo(() => location.search.substr(1), [location]);\n  const setQueryString = useCallback((queryString: string) => {\n    const path = location.pathname.substr(withPrefix('/').length - 1);\n    navigate(path + (queryString ? `?${queryString}` : ''));\n  }, [location, navigate]);\n  return [queryString, setQueryString] as const;\n}\n","import gql from 'graphql-tag';\nimport * as React from 'react';\nimport * as ApolloReactCommon from '@apollo/react-common';\nimport * as ApolloReactComponents from '@apollo/react-components';\nimport * as ApolloReactHoc from '@apollo/react-hoc';\nexport type Maybe<T> = T | null;\nexport type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  Address: any;\n  ByteString: any;\n  DateTimeOffset: any;\n  Date: any;\n  DateTime: any;\n  Decimal: any;\n  Milliseconds: any;\n  Seconds: any;\n};\n\nexport type Action = {\n  __typename?: 'Action';\n  arguments: Array<ActionArgumentType>;\n};\n\nexport type ActionArgumentType = {\n  __typename?: 'ActionArgumentType';\n  key: Scalars['String'];\n  value: Scalars['String'];\n};\n\nexport type Block = {\n  __typename?: 'Block';\n  difficulty: Scalars['Int'];\n  hash: Scalars['ID'];\n  index: Scalars['Int'];\n  miner: Scalars['Address'];\n  nonce: Scalars['ByteString'];\n  previousBlock?: Maybe<Block>;\n  timestamp: Scalars['DateTimeOffset'];\n  transactions: Array<Transaction>;\n};\n\nexport type BlockQuery = {\n  __typename?: 'BlockQuery';\n  block?: Maybe<Block>;\n  blocks: Array<Block>;\n  transaction?: Maybe<Transaction>;\n};\n\nexport type BlockQueryBlockArgs = {\n  hash?: Maybe<Scalars['ID']>;\n};\n\nexport type BlockQueryBlocksArgs = {\n  desc?: Maybe<Scalars['Boolean']>;\n  offset?: Maybe<Scalars['Int']>;\n  limit?: Maybe<Scalars['Int']>;\n  excludeEmptyTxs?: Maybe<Scalars['Boolean']>;\n};\n\nexport type BlockQueryTransactionArgs = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type Transaction = {\n  __typename?: 'Transaction';\n  actions: Array<Action>;\n  id: Scalars['ID'];\n  nonce: Scalars['Int'];\n  publicKey: Scalars['ByteString'];\n  signature: Scalars['ByteString'];\n  signer: Scalars['Address'];\n  timestamp: Scalars['DateTimeOffset'];\n  updatedAddresses: Array<Scalars['Address']>;\n};\nexport type BlockCommonFragment = { __typename?: 'Block' } & Pick<\n  Block,\n  'hash' | 'index' | 'difficulty' | 'timestamp'\n>;\n\nexport type TransactionCommonFragment = { __typename?: 'Transaction' } & Pick<\n  Transaction,\n  | 'id'\n  | 'nonce'\n  | 'publicKey'\n  | 'signature'\n  | 'signer'\n  | 'timestamp'\n  | 'updatedAddresses'\n>;\n\nexport type BlockListQueryVariables = {\n  offset: Scalars['Int'];\n  limit: Scalars['Int'];\n  excludeEmptyTxs: Scalars['Boolean'];\n};\n\nexport type BlockListQuery = { __typename?: 'BlockQuery' } & {\n  blocks: Array<\n    { __typename?: 'Block' } & Pick<Block, 'miner'> & {\n        transactions: Array<\n          { __typename?: 'Transaction' } & Pick<Transaction, 'id'>\n        >;\n      } & BlockCommonFragment\n  >;\n};\n\nexport type BlockByHashQueryVariables = {\n  hash?: Maybe<Scalars['ID']>;\n};\n\nexport type BlockByHashQuery = { __typename?: 'BlockQuery' } & {\n  block: Maybe<\n    { __typename?: 'Block' } & Pick<Block, 'miner' | 'nonce'> & {\n        previousBlock: Maybe<{ __typename?: 'Block' } & Pick<Block, 'hash'>>;\n        transactions: Array<\n          { __typename?: 'Transaction' } & TransactionCommonFragment\n        >;\n      } & BlockCommonFragment\n  >;\n};\n\nexport type TransactionByIdQueryVariables = {\n  id?: Maybe<Scalars['ID']>;\n};\n\nexport type TransactionByIdQuery = { __typename?: 'BlockQuery' } & {\n  transaction: Maybe<\n    { __typename?: 'Transaction' } & TransactionCommonFragment\n  >;\n};\nexport const BlockCommonFragmentDoc = gql`\n  fragment BlockCommon on Block {\n    hash\n    index\n    difficulty\n    timestamp\n  }\n`;\nexport const TransactionCommonFragmentDoc = gql`\n  fragment TransactionCommon on Transaction {\n    id\n    nonce\n    publicKey\n    signature\n    signer\n    timestamp\n    updatedAddresses\n  }\n`;\nexport const BlockListDocument = gql`\n  query BlockList($offset: Int!, $limit: Int!, $excludeEmptyTxs: Boolean!) {\n    blocks(\n      desc: true\n      offset: $offset\n      limit: $limit\n      excludeEmptyTxs: $excludeEmptyTxs\n    ) {\n      ...BlockCommon\n      miner\n      transactions {\n        id\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n`;\nexport type BlockListComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockListQuery,\n    BlockListQueryVariables\n  >,\n  'query'\n> &\n  ({ variables: BlockListQueryVariables; skip?: boolean } | { skip: boolean });\n\nexport const BlockListComponent = (props: BlockListComponentProps) => (\n  <ApolloReactComponents.Query<BlockListQuery, BlockListQueryVariables>\n    query={BlockListDocument}\n    {...props}\n  />\n);\n\nexport type BlockListProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockListQuery,\n  BlockListQueryVariables\n> &\n  TChildProps;\nexport function withBlockList<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockListQuery,\n    BlockListQueryVariables,\n    BlockListProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockListQuery,\n    BlockListQueryVariables,\n    BlockListProps<TChildProps>\n  >(BlockListDocument, {\n    alias: 'withBlockList',\n    ...operationOptions,\n  });\n}\nexport type BlockListQueryResult = ApolloReactCommon.QueryResult<\n  BlockListQuery,\n  BlockListQueryVariables\n>;\nexport const BlockByHashDocument = gql`\n  query BlockByHash($hash: ID) {\n    block(hash: $hash) {\n      ...BlockCommon\n      miner\n      nonce\n      previousBlock {\n        hash\n      }\n      transactions {\n        ...TransactionCommon\n      }\n    }\n  }\n  ${BlockCommonFragmentDoc}\n  ${TransactionCommonFragmentDoc}\n`;\nexport type BlockByHashComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    BlockByHashQuery,\n    BlockByHashQueryVariables\n  >,\n  'query'\n>;\n\nexport const BlockByHashComponent = (props: BlockByHashComponentProps) => (\n  <ApolloReactComponents.Query<BlockByHashQuery, BlockByHashQueryVariables>\n    query={BlockByHashDocument}\n    {...props}\n  />\n);\n\nexport type BlockByHashProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  BlockByHashQuery,\n  BlockByHashQueryVariables\n> &\n  TChildProps;\nexport function withBlockByHash<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    BlockByHashQuery,\n    BlockByHashQueryVariables,\n    BlockByHashProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    BlockByHashQuery,\n    BlockByHashQueryVariables,\n    BlockByHashProps<TChildProps>\n  >(BlockByHashDocument, {\n    alias: 'withBlockByHash',\n    ...operationOptions,\n  });\n}\nexport type BlockByHashQueryResult = ApolloReactCommon.QueryResult<\n  BlockByHashQuery,\n  BlockByHashQueryVariables\n>;\nexport const TransactionByIdDocument = gql`\n  query TransactionById($id: ID) {\n    transaction(id: $id) {\n      ...TransactionCommon\n    }\n  }\n  ${TransactionCommonFragmentDoc}\n`;\nexport type TransactionByIdComponentProps = Omit<\n  ApolloReactComponents.QueryComponentOptions<\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables\n  >,\n  'query'\n>;\n\nexport const TransactionByIdComponent = (\n  props: TransactionByIdComponentProps\n) => (\n  <ApolloReactComponents.Query<\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables\n  >\n    query={TransactionByIdDocument}\n    {...props}\n  />\n);\n\nexport type TransactionByIdProps<TChildProps = {}> = ApolloReactHoc.DataProps<\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables\n> &\n  TChildProps;\nexport function withTransactionById<TProps, TChildProps = {}>(\n  operationOptions?: ApolloReactHoc.OperationOption<\n    TProps,\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables,\n    TransactionByIdProps<TChildProps>\n  >\n) {\n  return ApolloReactHoc.withQuery<\n    TProps,\n    TransactionByIdQuery,\n    TransactionByIdQueryVariables,\n    TransactionByIdProps<TChildProps>\n  >(TransactionByIdDocument, {\n    alias: 'withTransactionById',\n    ...operationOptions,\n  });\n}\nexport type TransactionByIdQueryResult = ApolloReactCommon.QueryResult<\n  TransactionByIdQuery,\n  TransactionByIdQueryVariables\n>;\n"],"sourceRoot":""}